---
- name: Create the Authelia configuration folder
  ansible.builtin.file: state=directory path="{{ srv_root }}/authelia/config" mode=0700 access_time=preserve modification_time=preserve

- name: Check if the 'ldap' network exists
  community.docker.docker_network_info: name=ldap
  register: docker_network_ldap

- name: Check if the 'proxy' network exists
  community.docker.docker_network_info: name=proxy
  register: docker_network_proxy

- name: Check if the 'cache' network exists
  community.docker.docker_network_info: name=cache
  register: docker_network_cache

- name: Create the Authelia compose file
  changed_when: false
  ansible.builtin.copy:
    dest: "{{ srv_root }}/authelia/docker-compose.yml"
    mode: "0400"
    content: |
      ---
      x-defaults: &defaults
        {{ compose_defaults|to_yaml|trim|indent(2) }}

      networks:
        sso: { name: sso, driver: bridge, ipam: { config: [ { subnet: "{{ compose_networks.sso }}" } ] } }
      {% if docker_network_ldap.exists|bool %}
        ldap: { external: true }
      {% endif %}
      {% if docker_network_proxy.exists|bool %}
        proxy: { external: true }
      {% endif %}
      {% if docker_network_cache.exists|bool %}
        cache: { external: true }
      {% endif %}

      services:
        authelia:
          <<: *defaults
          container_name: authelia
          hostname: authelia
          image: authelia/authelia:latest
          networks:
            - sso
      {% if docker_network_ldap.exists|bool %}
            - ldap
      {% endif %}
      {% if docker_network_proxy.exists|bool %}
            - proxy
      {% else %}
          ports: ["9091:9091/tcp"]
      {% endif %}
          security_opt: [no-new-privileges]
          healthcheck:
            test: /usr/bin/timeout 10s /app/healthcheck.sh
            start_period: 5s
            interval: 60s
            timeout: 10s
            retries: 3
          environment:
            X_AUTHELIA_CONFIG_FILTERS: template
          volumes:
            - ./config:/config:rw
            - /etc/localtime:/etc/localtime:ro
            - /etc/timezone:/etc/timezone:ro
            - authelia_secrets:/secrets:ro
          command: --config /config/configuration.yml
          depends_on:
            authelia-generator:
              condition: service_completed_successfully
          labels:
            com.centurylinklabs.watchtower.enable: true
      {% if docker_network_proxy.exists|bool %}
            traefik.enable: true
            traefik.http.routers.authelia.rule: Host(`{{ authelia_domain }}`) && PathPrefix(`{{ authelia_path }}/`)
            traefik.http.routers.authelia.entrypoints: https
            traefik.http.routers.authelia.service: authelia
            traefik.http.services.authelia.loadbalancer.server.port: 9091
      {% endif %}

        authelia-generator:
          <<: *defaults
          container_name: authelia-generator
          hostname: authelia-generator
          image: authelia/authelia:latest
          restart: 'no'
          volumes:
            - authelia_secrets:/secrets:rw
          entrypoint:
            - /bin/sh
            - -c
            - |
              set -e
              /bin/rm -rf /certs/* /secrets/*
              /app/authelia crypto hash generate pbkdf2 -i 310000 -s 16 -v sha512 --password '{{ authelia_admin_pass }}' | /usr/bin/cut -d' ' -f2 | /usr/bin/tee /secrets/_admin.hash
      {% for client in authelia_clients %}
              /app/authelia crypto hash generate argon2 --password '{{ authelia_clients[client].secret }}' | /usr/bin/cut -d' ' -f2 | /usr/bin/tee /secrets/{{ client }}.hash
      {% endfor %}

      volumes:
        authelia_secrets:
          driver: local

- name: Generate a private key
  community.crypto.openssl_privatekey:
    path: "{{ srv_root }}/authelia/config/private.pem"
    type: RSA
    size: 4096
    return_content: true
  register: authelia_cert

- name: Authelia configuration file
  ansible.builtin.copy:
    dest: "{{ srv_root }}/authelia/config/configuration.yml"
    mode: "0400"
    content: |
      ---
      server:
        address: ":9091{{ authelia_path|default('/') }}"
      log:
        level: debug
      theme: dark
      totp:
        issuer: Authelia ({{ srv_domain }})
      authentication_backend:
      {% if docker_network_ldap.exists|bool %}
        ldap:
          address: 'ldap://openldap:389'
          implementation: 'custom'
          timeout: 5s
          base_dn: 'dc={{ srv_domain.split('.')|join(",dc=") }}'
          additional_users_dn: 'ou=users'
          users_filter: '(&(objectClass=posixAccount)(|({username_attribute}={input})({mail_attribute}={input})))'
          additional_groups_dn: 'ou=groups'
          groups_filter: '(&(objectClass=groupOfUniqueNames)(uniquemember={dn}))'
          group_search_mode: 'filter'
          permit_unauthenticated_bind: false
          user: 'cn={{ ldap_read_user }},dc={{ srv_domain.split('.')|join(",dc=") }}'
          password: '{{ ldap_read_pass }}'
          attributes:
            username: 'uid'
            display_name: 'displayName'
            mail: 'mail'
            member_of: 'memberOf'
            group_name: 'cn'
      {% else %}
        file:
          path: /etc/authelia/database.yml
          watch: true
          search:
            email: true
          password:
            algorithm: pbkdf2
            pkdf2:
              iterations: 310000
              salt_length: 16
              variant: sha512
      {% endif %}
      access_control:
        default_policy: deny
        rules:
          # Rules applied to everyone
          - domain_regex: "^(.*\\.)?{{ srv_domain }}$"
            resources:
              - "^/-/.*"
            policy: {{ authelia_policy }}
      session:
        name: __auth
        secret: {{ authelia_secret_session }}
        expiration: 3600  # 1 hour
        inactivity: 300  # 5 minutes
        remember_me: 604800  # 1 week
        same_site: lax
        cookies:
          - domain: "{{ srv_domain }}"
            authelia_url: "https://{{ authelia_domain }}{{ authelia_path }}"
            default_redirection_url: "https://{{ srv_domain }}/"
      {% if docker_network_cache.exists|bool %}
      storage:
        redis:
          host: redis
      {% endif %}
      regulation:
        max_retries: 3
        find_time: 120
        ban_time: 300
      storage:
        encryption_key: "{{ authelia_secret_storage }}"
        local:
          path: /config/db.sqlite3
      notifier:
      #TODO: Email notifier
        disable_startup_check: true # FIXME: Remove this if SMTP
        filesystem:
          filename: /config/notification.txt
      # TODO: Telemetry metrics
      # TODO: Security Password policy
      identity_validation:
        reset_password:
          jwt_secret: "{{ authelia_secret_jwt }}"
      identity_providers:
        oidc:
          jwks:
            - key: |
                {{ authelia_cert.privatekey|indent(10) }}
          clients:
      {% for client in authelia_clients %}
            - client_id: "{{ client|lower }}"
              client_name: "{{ client|title }}"
              public: false
              client_secret: {{ 'gitea_test'|argon2('salt') }}
              redirect_uris: {{ authelia_clients[client].redirects|to_yaml|indent(8) }}
              scopes:
                - 'openid'
                - 'email'
                - 'profile'
              userinfo_signed_response_alg: 'none'
              token_endpoint_auth_method: 'client_secret_basic'
      {% endfor %}
          

- name: Create the Authelia users database
  ansible.builtin.copy:
    dest: "{{ srv_root }}/authelia/config/database.yml"
    mode: "0400"
    content: |
      ---
      users:
        administrator:
          displayname: Administrator
          email: "{{ email_administrator }}"
          password: '{{ '{{ secret "/secrets/_admin.hash" }}' }}'
          groups:
            - admins
            - dev

- name: Deploy Authelia service
  community.docker.docker_compose_v2: project_src="{{ srv_root }}/authelia" remove_orphans=true