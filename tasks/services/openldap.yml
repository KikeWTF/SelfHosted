---
- name: Create the OpenLDAP configuration folder
  ansible.builtin.file: state=directory path="{{ srv_root }}/openldap/config" mode=0700 access_time=preserve modification_time=preserve

- name: Create the OpenLDAP compose file
  changed_when: false
  ansible.builtin.copy:
    dest: "{{ srv_root }}/openldap/docker-compose.yml"
    mode: "0400"
    content: |
      ---
      x-defaults: &defaults
        {{ compose_defaults|to_yaml|trim|indent(2) }}

      networks:
        ldap: { name: ldap, driver: bridge, ipam: { config: [ { subnet: "{{ compose_networks.ldap }}" } ] } }

      services:
        openldap:
          <<: *defaults
          container_name: openldap
          hostname: openldap
          image: osixia/openldap:latest
          networks: [ldap]
          security_opt: [no-new-privileges]
          healthcheck:
            test: /usr/bin/timeout 10s /bin/sh -c '/bin/cat /run/slapd/slapd.pid || exit 1'
            start_period: 5s
            interval: 60s
            timeout: 10s
            retries: 3
          command: --copy-service --loglevel debug
          environment:
            LDAP_ORGANISATION: {{ srv_org }}
            LDAP_DOMAIN: {{ srv_domain }}
            LDAP_BASE_DN: dc={{ srv_domain.split('.')|join(',dc=') }}
            LDAP_ADMIN_USERNAME: admin
            LDAP_ADMIN_PASSWORD: {{ ldap_admin_pass }}
            LDAP_CONFIG_PASSWORD: {{ ldap_config_pass }}
            LDAP_READONLY_USER: true
            LDAP_READONLY_USER_USERNAME: {{ ldap_read_user }}
            LDAP_READONLY_USER_PASSWORD: {{ ldap_read_pass }}
          volumes:
            - {{ srv_data }}/openldap/ldap:/var/lib/ldap:rw
            - {{ srv_data }}/openldap/slap:/etc/ldap/slapd.d:rw
            - ./config:/container/service/slapd/assets/config/bootstrap/ldif/custom:ro
          labels:
            com.centurylinklabs.watchtower.enable: true
            homepage.name: OpenLDAP
            homepage.group: Services
            homepage.description: LDAP server
            homepage.icon: /icons/openldap.png

- name: LDIF | Disable anonymous bind
  ansible.builtin.copy:
    dest: "{{ srv_root }}/openldap/config/disable-anon-bind.ldif"
    mode: "0400"
    content: |
      dn: cn=config
      changetype: modify
      add: olcDisallows
      olcDisallows: bind_anon
      
      dn: cn=config
      changetype: modify
      add: olcRequires
      olcRequires: authc
      
      dn: olcDatabase={-1}frontend,cn=config
      changetype: modify
      add: olcRequires
      olcRequires: authc

- name: LDIF | Modify ACL
  ansible.builtin.copy:
    dest: "{{ srv_root }}/openldap/config/modify-acl.ldif"
    mode: "0400"
    content: |
      dn: olcDatabase={1}{{ '{{ LDAP_BACKEND }}' }},cn=config
      changetype: modify
      delete: olcAccess
      -
      add: olcAccess
      olcAccess: to *
                  by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage
                  by * break
      olcAccess: to attrs=userPassword,shadowLastChange
                  by self write
                  by dn="cn=admin,{{ '{{ LDAP_BASE_DN }}' }}" write
                  by anonymous auth
                  by * none
      olcAccess: to dn.subtree="ou=users,{{ '{{ LDAP_BASE_DN }}' }}"
                  by self read
                  by dn="cn=admin,{{ '{{ LDAP_BASE_DN }}' }}" write
                  by dn="cn={{ '{{ LDAP_READONLY_USER_USERNAME }}' }},{{ '{{ LDAP_BASE_DN }}' }}" read
                  by * none
      olcAccess: to * by self read
                  by dn="cn=admin,{{ '{{ LDAP_BASE_DN }}' }}" write
                  by dn="cn={{ '{{ LDAP_READONLY_USER_USERNAME }}' }},{{ '{{ LDAP_BASE_DN }}' }}" read
                  by * none

- name: LDIF | Add custom schema
  ansible.builtin.copy:
    dest: "{{ srv_root }}/openldap/config/custom-schema.ldif"
    mode: "0400"
    content: |
      dn: ou=users,{{ '{{ LDAP_BASE_DN }}' }}
      objectClass: organizationalUnit
      ou: users

      dn: ou=groups,{{ '{{ LDAP_BASE_DN }}' }}
      objectClass: organizationalUnit
      ou: groups

      dn: cn=admins,ou=groups,{{ '{{ LDAP_BASE_DN }}' }}
      cn: admins
      objectclass: groupOfUniqueNames
      objectclass: top
      uniquemember: cn=admins,ou=groups,{{ '{{ LDAP_BASE_DN }}' }}

      dn: cn=users,ou=groups,{{ '{{ LDAP_BASE_DN }}' }}
      objectClass: posixGroup
      cn: users
      gidNumber: 5000

- name: Deploy OpenLDAP service
  community.docker.docker_compose_v2: project_src="{{ srv_root }}/openldap" remove_orphans=true